###please run with "dev" environment

###credentials

###good weather with correct credentials
POST http://{{host}}:{{port}}/credentials
Content-Type: application/json

{
  "email": "yibingdoe@hotmail.com",
  "password": "haha12"
}
> {% client.global.set("auth_token", response.body.token) %}



###bad weather with wrong credentials
POST http://{{host}}:{{port}}/credentials
Content-Type: application/json

{
  "email": "yibingdoe@hotmail.com",
  "password": "haha123"
}






###bids

###Good weather tests
###get all bids
GET http://{{host}}:{{port}}/bids
Accept: application/json
Authorization: Bearer {{auth_token}}


###get one bid by id 2
GET http://{{host}}:{{port}}/bids/2
Accept: application/json
Authorization: Bearer {{auth_token}}

### Post a new bid
POST http://{{host}}:{{port}}/bids
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "id": 30,
  "price": 5,
  "placedByUserId": 3,
  "forBikeId": 3
}

###delete bid at id 2
DELETE http://{{host}}:{{port}}/bids/2
Authorization: Bearer {{auth_token}}

###bad weather tests
###get all bids but authorization token is in correct
GET http://{{host}}:{{port}}/bids
Accept: application/json
Authorization: Bearer {{auth_token}}

###get one bid by id 333 which does not exist
GET http://{{host}}:{{port}}/bids/333
Accept: application/json
Authorization: Bearer {{auth_token}}






###users

###get all users
http://{{host}}:{{port}}/users
Accept: application/json
Authorization: Bearer {{auth_token}}

###get one user by id 2
GET http://{{host}}:{{port}}/users/2
Accept: application/json
Authorization: Bearer {{auth_token}}

###create a user
POST http://{{host}}:{{port}}/users
Authorization: Bearer {{auth_token}}
Content-Type:application/json

{
  "name": "Gerralt",
  "email": "gerralt@gmail.com",
  "passwordHashValue": "haha12"
}

###delete a user on id 1
DELETE http://{{host}}:{{port}}/users/1
Accept: application/json
Authorization: Bearer {{auth_token}}

###bad weather test
###get all users but the token is incorrect
http://{{host}}:{{port}}/users
Accept: application/json
Authorization: Bearer {{auth_token}}

###get one user by id 555 which does not exist
GET http://{{host}}:{{port}}/users/555
Accept: application/json
Authorization: Bearer {{auth_token}}

###create a user but the password is empty
POST http://{{host}}:{{port}}/users
Authorization: Bearer {{auth_token}}
Content-Type:application/json

{
  "name": "Gerralt",
  "email": "gerralt@gmail.com",
  "passwordHashValue": ""
}

###delete a user on an id that doesnt exist e.g. 89
DELETE http://{{host}}:{{port}}/clients/89
Accept: application/json
Authorization: Bearer {{auth_token}}






###bikes

###get all bikes
GET http://{{host}}:{{port}}/bikes
Accept: application/json
Authorization: Bearer {{auth_token}}

###get all bikes filtered on frame type and frame height
GET http://{{host}}:{{port}}/bikes?frameType=Diamond&frameHeightInCm=53
Accept: application/json
Authorization: Bearer {{auth_token}}

###search bikes on keyword "Ga"
GET http://{{host}}:{{port}}/bikes/search?keyword=Ga
Accept: application/json
Authorization: Bearer {{auth_token}}

###get all bikes filtered on brand
GET http://{{host}}:{{port}}/bikes?brand=Gazelle
Accept: application/json
Authorization: Bearer {{auth_token}}

###get one bike by id 1
GET http://{{host}}:{{port}}/bikes/1
Accept: application/json
Authorization: Bearer {{auth_token}}

###create a bike
POST http://{{host}}:{{port}}/bikes
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "brand": "Gazelle",
  "frameType": "Diamond",
  "frameHeightInCm": "55",
  "endingDate": "2023-04-25"
}


###modify a bike
PUT http://{{host}}:{{port}}/bikes
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "id": 10,
  "brand": "Gazelle",
  "frameType": "Diamond",
  "frameHeightInCm": "55"
}

###delete a bike on id 2
DELETE http://{{host}}:{{port}}/bikes/2
Accept: application/json
Authorization: Bearer {{auth_token}}

###bad weather
###get all bikes but the token is incorrect
GET http://{{host}}:{{port}}/bikes
Accept: application/json
Authorization: Bearer {{auth_token}}

###get all bikes filtered on frame type and frame height but the frame type does not exist
GET http://{{host}}:{{port}}/bikes?frameType=Diand&frameHeightInCm=53
Accept: application/json
Authorization: Bearer {{auth_token}}

###get all bikes filtered on brand but the brand does not exist
GET http://{{host}}:{{port}}/bikes?brand=Gazelleah
Accept: application/json
Authorization: Bearer {{auth_token}}

###get one bike by id that does not exist such as 88
GET http://{{host}}:{{port}}/bikes/88
Accept: application/json
Authorization: Bearer {{auth_token}}

###create a bike but the some key in the body is empty
POST http://{{host}}:{{port}}/bikes
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "brand": "Gazelle",
  "frameType": "",
  "frameHeightInCm": "55",
  "endingDate": "2023-04-25"
}


###modify a bike but the id does not exist
PUT http://{{host}}:{{port}}/bikes
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "id": 1022,
  "brand": "Gazelle",
  "frameType": "Diamond",
  "frameHeightInCm": "55"
}

###delete a bike on id that does not exist such as 444
DELETE http://{{host}}:{{port}}/bikes/444
Accept: application/json
Authorization: Bearer {{auth_token}}







